#         APPROPRIATE METADATA              #
#############################################
sequence_data$Country<-gsub("-", NA, sequence_data$Country)
nodes_diff$country<-NA
#' Identify the countries the sequences descended from the nodes of interest are from
for (i in 1:length(nodes_diff$node)) {
countries<-unique(sequence_data$Country[
which(sequence_data$ID %in% tree$tip.label[Descendants(tree, nodes_diff$node[i], "tips")[[1]]])])
if(length(which(is.na(countries))) != 0) {
countries<-countries[-c(which(is.na(countries)))]
}
if (length(countries) != 1){
nodes_diff$country[i]<-list(c(countries))
} else {
nodes_diff$country[i]<-countries
}
}
nodes_diff$year_first<-NA
nodes_diff$year_last<-NA
#' Identify the first and most recent years of detection for the potential lineages
for (i in 1:length(nodes_diff$node)) {
nodes_diff$year_first[i]<-min(sequence_data$Year[
which(sequence_data$ID %in% tree$tip.label[Descendants(tree, nodes_diff$node[i], "tips")[[1]]])])
nodes_diff$year_last[i]<-max(sequence_data$Year[
which(sequence_data$ID %in% tree$tip.label[Descendants(tree, nodes_diff$node[i], "tips")[[1]]])])
}
nodes_diff$year_last<-as.integer(nodes_diff$year_last)
nodes_diff$year_first<-as.integer(nodes_diff$year_first)
#' Only carry forwards potential lineages where all sequences are from a 5 year or less time period
nodes_diff<-nodes_diff[which((nodes_diff$year_last - nodes_diff$year_first) < 5),]
if (length(nodes_diff$node) != 0) {
#############################################
#                 NAMING                    #
#############################################
emerging_lineages<-nodes_diff[c(1:3, 6, 8:10)]
#' Extract the useful information about the emerging/undersampled lineages
#' Add an Ex suffix to denote an emerging/undersampled lineage, where x indicates multiple emerging/undersampled
#' lineages descended from the same parent lineage
emerging_lineages$lineage<-paste(emerging_lineages$lineage, "E1", sep = "_")
emerging_lineages$lineage[
which(duplicated(emerging_lineages$lineage))]<-
gsub("_E1", "_E2", emerging_lineages$lineage[which(duplicated(emerging_lineages$lineage))])
emerging_lineages$lineage[
which(duplicated(emerging_lineages$lineage))]<-
gsub("_E2", "_E3", emerging_lineages$lineage[which(duplicated(emerging_lineages$lineage))])
emerging_lineages<-emerging_lineages[,2:7]
emerging_lineages <- apply(emerging_lineages,2,as.character)
write.csv(emerging_lineages, paste(args, "/Outputs/energing_undersampled.csv", sep = ""), row.names = F)
} else {
print("No emerging or undersampled lineages detected in relevant lineages.")
}
} else {
print("No emerging or undersampled lineages detected in relevant lineages.")
}
lengths<-data.frame(setNames(tree$edge.length[sapply(1:length(tree$tip.label),
function(x,y) which (y==x),y=tree$edge[,2])],
tree$tip.label))
colnames(lengths)<-"lengths"
seqs<-rownames(lengths)[which(lengths$lengths >= quantile(lengths$lengths, .95))]
seqs<-seqs[which(seqs %in% alignment$nam)]
seqs<-seqs[which(seqs %in% sequence_data$ID)]
lengths<-data.frame(ID = rownames(lengths), length = lengths$lengths)
lengths<-lengths[which(lengths$ID %in% seqs),]
lengths$close<-NA
lengths$lineage<-NA
lengths$cutoff<-NA
for (i in 1:length(lengths$ID)) {
lengths$lineage[i]<-sequence_data$lineage[which(sequence_data$ID == lengths$ID[i])]
}
#############################################
#         SIGNIFICANT DIVERSITY             #
#############################################
for (i in 1:length(lengths$ID)) {
sequences<-sequence_data$ID[which(sequence_data$lineage == lengths$lineage[i])]
subset<-distances[which(rownames(distances)%in% sequences),
which(colnames(distances)%in% sequences)]
lengths$cutoff[i]<-quantile(subset, 0.95)
}
#' Identify the closest relative sequence. If the patristic distance between the query sequence and its
#' closest relative is at elast the 95th percentile of the lineage, list the relative. If not, 'NA'
for (i in c(1:length(lengths$ID))) {
up<-alignment$nam[(which(alignment$nam == lengths$ID[i]))+1][[1]]
down<-alignment$nam[(which(alignment$nam == lengths$ID[i]))-1][[1]]
test<-which(tree$tip.label == lengths$ID[i])
if (is.na(up)) {
up<-0
} else {
up<-which(tree$tip.label == up)
up<-castor::get_pairwise_distances(tree, test, up)
}
if (is.na(down)) {
down<-0
} else {
down<-which(tree$tip.label == down)
down<-castor::get_pairwise_distances(tree, test, down)
}
if(down > up && down >= lengths$cutoff[i]) {
lengths$close[i]<-alignment$nam[(which(alignment$nam == lengths$ID[i]))-1]
} else {
if (up >= lengths$cutoff[i]) {
lengths$close[i]<-alignment$nam[(which(alignment$nam == lengths$ID[i]))+1]
} else {
lengths$close[i] <- NA
}
}
}
lengths<-lengths[-c(which(is.na(lengths$close))),]
#############################################
#                 OUTPUT                    #
#############################################
#' Make a table of information about the number of diverse singletons in each lineage, and where/when they
#' are from.
SOI<-data.frame(lineage = lineage_info$lineage, n_singletons = NA, singleton_countries = NA, singleton_years = NA)
SOI<-SOI[which(SOI$lineage %in% lengths$lineage),]
for (i in 1:length(SOI$lineage)) {
SOI$n_singletons[i]<-length(which(lengths$lineage == SOI$lineage[i]))
}
for (i in 1:length(lengths$lineage)) {
lengths$year[i]<-metadata$year[which(metadata$ID == lengths$ID[i])]
lengths$country[i]<-metadata$country[which(metadata$ID == lengths$ID[i])]
}
for (i in 1:length(SOI$lineage)) {
SOI$singleton_countries[i]<-list(unique(lengths$country[which(lengths$lineage == SOI$lineage[i])]))
SOI$singleton_years[i]<-list(unique(lengths$year[which(lengths$lineage == SOI$lineage[i])]))
}
View(SOI)
devtools::document()
rm(list=ls())
devtools::document()
devtools::build_vignettes()
.Last.error.trace
knitr::opts_chunk$set(echo = TRUE)
library(MADDOG)
tree<-ape::read.tree(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta.contree", package = "MADDOG"))
alignment<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta", package = "MADDOG"))
alignment<-ape::as.alignment(alignment)
metadata<-read.csv(system.file("extdata", "Examples/Lineage_designation/Example_designation_metadata.csv", package = "MADDOG"))
ancestral<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/ancestral_sequences.fasta", package = "MADDOG"))
ancestral<-ape::as.alignment(ancestral)
library(MADDOG)
tree<-ape::read.tree(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta.contree", package = "MADDOG"))
alignment<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta", package = "MADDOG"))
alignment<-ape::as.alignment(alignment)
metadata<-read.csv(system.file("extdata", "Examples/Lineage_designation/Example_designation_metadata.csv", package = "MADDOG"))
ancestral<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/ancestral_sequences.fasta", package = "MADDOG"))
ancestral<-ape::as.alignment(ancestral)
sequence_designation<-seq_designation(tree, 90, alignment, metadata, ancestral)
defining_node_information<-node_info(tree, 90, alignment, metadata, ancestral)
head(sequence_designation, 20)
defining_node_information
lineage_info<-lineage_info(sequence_designation, metadata) ; lineage_info
sequences<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_assignment/example.fasta", package = "MADDOG"))
assignments<-assign_lineages(sequences, "RABV"); assignments
assignments<-assign_lineages(sequences, "RABV"); assignments
sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
lineage_tree(lineage_info, defining_node_information, tree, metadata, sequence_designation)
View(defining_node_information)
sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
node_data<-defining_node_information
sequence_data<-sequence_designation
tree$tip.label <- gsub("\\..*", "", tree$tip.label, perl = T)
tree$node.comment<- gsub(".*=", "", tree$node.label, perl = T)
previous<-data.frame(assignment = unique(metadata$assignment), parent = "", n_seqs = NA)
previous$parent[1]<-""
for (i in 1:length(previous$assignment)) {
previous$n_seqs[i]<-length(which(metadata$alignment.name == previous$assignment[i]))
}
node_data<-node_data[order(node_data$lineage),]
node_data$parent<-NA
for (i in 1:length(previous$assignment)) {
previous$n_seqs[i]<-length(which(metadata$alignment.name == previous$assignment[i]))
}
node_data<-node_data[order(node_data$lineage),]
View(node_data)
names(defining_node_information)<-c("Node", "n_tips", "diff", "overlaps", "lineage", "numbers")
sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
node_data<-defining_node_information
tree$tip.label <- gsub("\\..*", "", tree$tip.label, perl = T)
tree$node.comment<- gsub(".*=", "", tree$node.label, perl = T)
previous<-data.frame(assignment = unique(metadata$assignment), parent = "", n_seqs = NA)
previous$parent[1]<-""
for (i in 1:length(previous$assignment)) {
previous$n_seqs[i]<-length(which(metadata$alignment.name == previous$assignment[i]))
}
node_data<-node_data[order(node_data$lineage),]
node_data$parent<-NA
node_data$parent[1]<-""
for (i in 2:length(node_data$node)) {
if (length(which(node_data$node %in% treeio::ancestor(tree, node_data$node[i]))) == 0) {
node_data$parent[i]<-""
} else {
parent<-node_data$lineage[which(node_data$node %in% treeio::ancestor(tree, node_data$node[i]))]
node_data$parent[i]<-parent[length(parent)]
}
}
View(defining_node_information)
names(defining_node_information)<-c("node", "n_tips", "diff", "overlaps", "lineage", "numbers")
sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
devtools::build_vignettes()
rm(list=ls())
library(MADDOG)
tree<-ape::read.tree(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta.contree", package = "MADDOG"))
alignment<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/Example_designation_aligned.fasta", package = "MADDOG"))
alignment<-ape::as.alignment(alignment)
metadata<-read.csv(system.file("extdata", "Examples/Lineage_designation/Example_designation_metadata.csv", package = "MADDOG"))
ancestral<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_designation/ancestral_sequences.fasta", package = "MADDOG"))
ancestral<-ape::as.alignment(ancestral)
sequence_designation<-seq_designation(tree, 90, alignment, metadata, ancestral)
defining_node_information<-node_info(tree, 90, alignment, metadata, ancestral)
names(defining_node_information)<-c("node", "n_tips", "diff", "overlaps", "lineage", "numbers")
head(sequence_designation, 20)
defining_node_information
lineage_info<-lineage_info(sequence_designation, metadata) ; lineage_info
sequences<-seqinr::read.fasta(system.file("extdata", "Examples/Lineage_assignment/example.fasta", package = "MADDOG"))
assignments<-assign_lineages(sequences, "RABV"); assignments
sunburst(lineage_info, defining_node_information, tree, metadata, sequence_designation)
lineage_tree(lineage_info, defining_node_information, tree, metadata, sequence_designation)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::build_vignettes()
.Last.error.trace
devtools::build_vignettes()
install.packages("knitr")
devtools::build_vignettes()
install.packages("rmarkdown")
devtools::build_vignettes()
rm(list=ls())
rm(list=ls())
library(ggplot2)
seq<-seqinr::read.alignment("/Users/criseldabautista/Documents/GitHub/MADDOG/Ph_designation/Ph_designation.fasta", format = "fasta")
metadata<-read.csv("/Users/criseldabautista/Documents/GitHub/MADDOG/Ph_designation/Ph_designation_metadata.csv")
`%notin%` <- Negate(`%in%`)
seq$nam[which(seq$nam %notin% metadata$ID)]
metadata$ID[which(metadata$ID %notin% seq$nam)]
regions<-data.frame(region=unique(metadata$place), count=NA)
for (i in 1:length(regions$region)) {
regions$count[i]<-length(which(metadata$place == regions$region[i]))
}
hosts<-data.frame(host=unique(metadata$species), count=NA)
for (i in 1:length(hosts$host)) {
hosts$count[i]<-length(which(metadata$species == hosts$host[i]))
}
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf")
install.packages("rnaturalearthdata")
rm(list=ls())
library(ggplot2)
seq<-seqinr::read.alignment("/Users/criseldabautista/Documents/GitHub/MADDOG_CTB/Ph_designation/Ph_designation.fasta", format = "fasta")
metadata<-read.csv("/Users/criseldabautista/Documents/GitHub/MADDOG_CTB/Ph_designation/Ph_designation_metadata.csv")
`%notin%` <- Negate(`%in%`)
seq$nam[which(seq$nam %notin% metadata$ID)]
metadata$ID[which(metadata$ID %notin% seq$nam)]
regions<-data.frame(region=unique(metadata$place), count=NA)
install.packages("dplyr")
library(dplyr)
sequence_data<-read.csv("sequence_data.csv")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(knitr)
sequence_data<-read.csv("sequence_data.csv")
metadata<-read.csv("Phil_metadata_prov.csv")
relevant_lineages<-read.csv("relevant_lineages.csv")
new_lineages<-read.csv("new_lineages.csv")
library(dplyr)
library(ggplot2)
library(knitr)
sequence_data<-read.csv("sequence_data.csv")
metadata<-read.csv("Phil_metadata_prov.csv")
relevant_lineages<-read.csv("relevant_lineages.csv")
new_lineages<-read.csv("new_lineages.csv")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: setting
library(dplyr)
library(ggplot2)
library(knitr)
sequence_data<-read.csv("sequence_data.csv")
metadata<-read.csv("Phil_metadata_prov.csv")
relevant_lineages<-read.csv("relevant_lineages.csv")
new_lineages<-read.csv("new_lineages.csv")
# Chunk 3
h1, h2{
text-align: center;
font-family: Helvetica;
font-weight: bold;
}
body{
margin-top: 75px;
font-family: Helvetica;
font-weight: lighter;
font-size: 14pt;
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: setting
library(dplyr)
library(ggplot2)
library(knitr)
sequence_data<-read.csv("sequence_data.csv")
metadata<-read.csv("Phil_metadata_prov.csv")
relevant_lineages<-read.csv("relevant_lineages.csv")
new_lineages<-read.csv("new_lineages.csv")
# Chunk 3
h1, h2{
text-align: center;
font-family: Helvetica;
font-weight: bold;
}
body{
margin-top: 75px;
font-family: Helvetica;
font-weight: lighter;
font-size: 14pt;
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: setting
library(dplyr)
library(ggplot2)
library(knitr)
sequence_data<-read.csv("sequence_data.csv")
metadata<-read.csv("Phil_metadata_place.csv")
relevant_lineages<-read.csv("relevant_lineages.csv")
new_lineages<-read.csv("new_lineages.csv")
# Chunk 3
h1, h2{
text-align: center;
font-family: Helvetica;
font-weight: bold;
}
body{
margin-top: 75px;
font-family: Helvetica;
font-weight: lighter;
font-size: 14pt;
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: setting
library(dplyr)
library(ggplot2)
library(knitr)
sequence_data<-read.csv("sequence_data.csv")
metadata<-read.csv("Phil_metadata_place.csv")
relevant_lineages<-read.csv("relevant_lineages.csv")
new_lineages<-read.csv("new_lineages.csv")
# Chunk 3
h1, h2{
text-align: center;
font-family: Helvetica;
font-weight: bold;
}
body{
margin-top: 75px;
font-family: Helvetica;
font-weight: lighter;
font-size: 14pt;
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: setting
library(dplyr)
library(ggplot2)
library(knitr)
sequence_data<-read.csv("sequence_data.csv")
metadata<-read.csv("Phil_metadata_place.csv")
relevant_lineages<-read.csv("relevant_lineages.csv")
new_lineages<-read.csv("new_lineages.csv")
# Chunk 3
h1, h2{
text-align: center;
font-family: Helvetica;
font-weight: bold;
}
body{
margin-top: 75px;
font-family: Helvetica;
font-weight: lighter;
font-size: 14pt;
}
# Chunk 4: general info
cat(paste("This study contains ", length(sequence_data$ID), " sequences from between ", min(sequence_data$year), " and ", max(sequence_data$year), ".", sep = ""))
cat(paste("This sequence data came from", length(unique(metadata$place)), "different places. "))
regions<-data.frame(region=unique(metadata$place), count=NA)
for (i in 1:length(regions$region)) {
regions$count[i]<-length(which(metadata$place == regions$region[i]))
}
names(regions)<-c("Place", "Number of Sequences")
kable(regions, row.names=F)
# Chunk 5: hosts
cat(paste("This sequence data came from", length(unique(metadata$species)), "different hosts. "))
hosts<-data.frame(host=unique(metadata$species), count=NA)
for (i in 1:length(hosts$host)) {
hosts$count[i]<-length(which(metadata$species == hosts$host[i]))
}
cat(paste(round(((hosts$count[grep("Canis familiaris", hosts$host)])/sum(hosts$count))*100, digits = 2)), "% of these are from dogs.", sep = "")
names(hosts)<-c("Host", "Number of Sequences")
kable(hosts, row.names=F)
# Chunk 6: hosts2
ggplot(metadata, aes(x = lineage, fill = species)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
# Chunk 7: lineage info
cat(paste("Overall", length(unique(sequence_data$lineage)), "lineages have been detected in this study.", (length(relevant_lineages$lineage)+length(new_lineages$lineage)) - length(unique(sequence_data$lineage)), "lineages are included here that have not been seen in this study, but are direct parents of lineages in this study, so are included for relevant evolutionary investigations."))
cat(paste("There are ", length(relevant_lineages$lineage), " existing lineages relevant to this study."))
kable(relevant_lineages[,-c(1,7)], row.names=F)
# Chunk 8: lineage new
if(length(new_lineages) != 0) {
cat(paste("There are ", length(new_lineages$lineage), " new lineages identified in this dataset."))
kable(new_lineages[,-c(6)], row.names=F)
} else {
cat(paste("There are no new lineages identified in this dataset."))
}
# Chunk 9: lineage_years
cat(paste("The sequences span ", as.integer(max(sequence_data$year)) - as.integer(min(sequence_data$year)), " years from ", min(sequence_data$year), " to ", max(sequence_data$year),". ", sep = ""))
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
cat(paste("The year with the greatest number of sequences is ", getmode(sequence_data$year), " with ", length(which(sequence_data$year == getmode(sequence_data$year))), " sequences."))
cat(paste("The most prevalent lineage is ", getmode(sequence_data$lineage), " with ", length(which(sequence_data$lineage == getmode(sequence_data$lineage))), " sequences."))
# Chunk 10: years_graph
data_sub<-sequence_data
graph<-ggplot(data_sub, aes(x = year, fill = lineage)) +
geom_bar() + theme(legend.position = "bottom") + theme(axis.text.x = element_text(size = 7)) +
theme(legend.position="none") +
theme(axis.title.x=element_blank())
lin<-data.frame(table(data_sub$lineage))
names(lin)<-c("lineage", "count")
pie<-ggplot(lin, aes(x="", y=count, fill=lineage)) +
geom_bar(stat="identity", width=1, color="white") +
coord_polar("y", start=0) +
theme_void()+   theme(legend.position="right") + theme(legend.text = element_text(size=7)) +theme(legend.key.size = unit(0.45,"cm"))+theme(legend.title = element_blank())
gridExtra::grid.arrange(graph,pie)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: setting
library(dplyr)
library(ggplot2)
library(knitr)
sequence_data<-read.csv("sequence_data.csv")
metadata<-read.csv("Phil_metadata_place.csv")
relevant_lineages<-read.csv("relevant_lineages.csv")
new_lineages<-read.csv("new_lineages.csv")
# Chunk 3
h1, h2{
text-align: center;
font-family: Helvetica;
font-weight: bold;
}
body{
margin-top: 75px;
font-family: Helvetica;
font-weight: lighter;
font-size: 14pt;
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: setting
library(dplyr)
library(ggplot2)
library(knitr)
sequence_data<-read.csv("sequence_data.csv")
metadata<-read.csv("metadata_4B.csv")
relevant_lineages<-read.csv("relevant_lineages.csv")
new_lineages<-read.csv("new_lineages.csv")
# Chunk 3
h1, h2{
text-align: center;
font-family: Helvetica;
font-weight: bold;
}
body{
margin-top: 75px;
font-family: Helvetica;
font-weight: lighter;
font-size: 14pt;
}
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2: setting
library(dplyr)
library(ggplot2)
library(knitr)
sequence_data<-read.csv("sequence_data.csv")
metadata<-read.csv("metadata_4B.csv")
relevant_lineages<-read.csv("relevant_lineages.csv")
new_lineages<-read.csv("new_lineages.csv")
# Chunk 3
h1, h2{
text-align: center;
font-family: Helvetica;
font-weight: bold;
}
body{
margin-top: 75px;
font-family: Helvetica;
font-weight: lighter;
font-size: 14pt;
}
file.choose()
rmarkdown::render("Phil_Seq_data/Phil_sequences/Philippines.Rmd")
View(regions)
View(relevant_lineages)
View(sequence_data)
View(new_lineages)
View(metadata)
View(sequence_data)
rmarkdown::render("Phil_Seq_data/Phil_sequences/Philippines.Rmd")
